// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// space related tables
model Space {
  id            String           @id @unique @default(cuid())
  company_name  String?          @db.VarChar(255)
  name          String?          @db.VarChar(255)
  description   String?          @db.VarChar(1000)
  email         String           @unique @db.VarChar(255)
  status        SpaceStatus      @default(PENDING)
  reject_reason String?
  logo_url      String?          @db.VarChar(255)
  banner        String?          @db.VarChar(255)
  category      String?
  user_id       String?          @unique // after approval make user relation
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  created_by    String
  updated_by    String
  links         SpaceLinks[]     @relation("SpaceLinks")
  documents     SpaceDocuments[] @relation("SpaceToDocuments")
  quests        Quest[]          @relation("SpaceToQuest")
  token         Token[]          @relation("Token")
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  status      KeyStatus
  expire_time DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  space       Space?    @relation("Token", fields: [space_id], references: [id])
  space_id    String?
}

enum KeyStatus {
  EXPIRED
  ACTIVE
}

model SpaceLinks {
  id         String   @id @unique @default(cuid())
  link       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String
  updated_by String
  space      Space    @relation("SpaceLinks", fields: [space_id], references: [id])
  space_id   String
}

model SpaceDocuments {
  id         String   @id @unique @default(cuid())
  space_id   String
  space      Space    @relation("SpaceToDocuments", fields: [space_id], references: [id])
  path       String
  filename   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String
  updated_by String
}

// quest core tables
model Quest {
  id                  String                @id @unique @default(cuid())
  space_id            String
  title               String                @db.VarChar(255)
  description         String                @db.VarChar(1000)
  participant_limit   Int
  max_reward_point    Int
  end_date            DateTime
  reattempt           Int
  status              QuestStatus
  category            QuestCategory
  quest_time          Int? // quest time in seconds
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  created_by          String
  updated_by          String
  approval_status     QuestApprovalStatus   @default(INITIATED)
  reject_reason       String?
  space               Space                 @relation("SpaceToQuest", fields: [space_id], references: [id])
  template            QuestTemplate         @relation(fields: [template_id], references: [id])
  template_id         String                @unique
  moduleQuests        ModuleQuest[]
  questParticipant    QuestParticipant[]
  questVote           QuestVote[]
  questVoteDiscussion QuestVoteDiscussion[]
}

model ModuleQuest {
  id         String   @id @unique @default(cuid())
  module     Module   @relation(fields: [module_id], references: [id])
  module_id  String
  quest      Quest    @relation(fields: [quest_id], references: [id])
  quest_id   String
  order      Int? // Optional: Display order of quests within the module
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Module {
  id               String        @id @unique @default(cuid())
  title            String        @db.VarChar(255) // Title of the module
  description      String        @db.VarChar(1000) // Description of the module
  background_color String        @db.VarChar(7) // HEX code for the module's background color
  image_url        String        @db.VarChar(255) // URL to a module image
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  created_by       String
  updated_by       String
  moduleQuests     ModuleQuest[] // Relation to the join table for many-to-many relationship with Quest
}

model QuestParticipant {
  id                String                @id @unique @default(cuid())
  quest             Quest                 @relation(fields: [quest_id], references: [id])
  quest_id          String
  participant_id    String // user id that participate
  joined_at         DateTime              @default(now())
  completion_status QuestCompletionStatus @default(NOT_STARTED)
  score             Int? // Optional, can be null if not yet scored
  reward_points     Int? // Points earned, capped at quest.max_reward_point
  reward_collected  Boolean               @default(false)
  completed_at      DateTime? // Optional, can be null if not yet completed
  reattempt_count   Int                   @default(0) // Tracks reattempts up to quest.reattempt
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
}

model QuestTemplate {
  id            String   @id @unique @default(cuid())
  template_name String   @db.VarChar(255)
  description   String   @db.Text
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  quest         Quest?   @relation
}

// quest qna template related table
model QuestQNA {
  id               String             @id @unique @default(cuid())
  total_question   Int? // total questions
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  questQNAQuestion QuestQNAQuestion[]
}

model Question {
  id               String             @id @unique @default(cuid())
  question         String             @db.VarChar(500)
  answer_type      AnswerType         @default(SINGLE)
  options          Option[]
  answer           Answer[]
  questQNAQuestion QuestQNAQuestion[]
}

model QuestQNAQuestion {
  id               String         @id @unique @default(cuid())
  questQna         QuestQNA       @relation(fields: [questQna_id], references: [id])
  questQna_id      String
  question         Question       @relation(fields: [questionId], references: [id])
  questionId       String
  question_status  QuestionStatus @default(UNATTEMPTED)
  selected_options String?
}

model Option {
  id         String   @id @unique @default(cuid())
  content    String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  Answer     Answer[]
}

model Answer {
  id         String   @id @unique @default(cuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  option     Option   @relation(fields: [optionId], references: [id])
  optionId   String
}

// quest vote template related table
model QuestVote {
  id                   String                 @id @unique @default(cuid())
  quest                Quest                  @relation(fields: [quest_id], references: [id])
  quest_id             String
  news_item            String                 @db.VarChar(255) // Name or identifier of the news item voted on
  upvotes              Int                    @default(0) // Count of upvotes
  downvotes            Int                    @default(0) // Count of downvotes
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  QuestParticipantVote QuestParticipantVote[]
}

model QuestParticipantVote {
  id             String    @id @unique @default(cuid())
  quest_vote     QuestVote @relation(fields: [quest_vote_id], references: [id])
  quest_vote_id  String
  participant_id String // user id
  vote_type      VoteType // Enum for UPVOTE or DOWNVOTE
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
}

model QuestVoteDiscussion {
  id         String   @id @unique @default(cuid())
  quest      Quest    @relation(fields: [quest_id], references: [id])
  quest_id   String
  user_id    String
  comment    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// enums
enum SpaceStatus {
  PENDING
  REVIEW
  APPROVED
  REJECTED
}

enum QuestApprovalStatus {
  REVIEW
  APPROVED
  REJECTED
  INITIATED
}

enum QuestStatus {
  DRAFTED
  SCHEDULED
  PAUSED
  RUNNING
  ENDED
}

enum QuestCategory {
  GENERAL
  TIMED
  MINI_GAMES
  DAILY
}

enum AnswerType {
  SINGLE // For questions expecting exactly one answer
  MULTIPLE // For questions expecting more than one answer
}

enum QuestionStatus {
  UNATTEMPTED
  CORRECT
  INCORRECT
}

enum QuestCompletionStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
